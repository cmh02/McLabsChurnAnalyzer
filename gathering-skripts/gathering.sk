###
Script: skGathering - Utilities Skript
Author: cmh02
Version: 1.0

This script will provide various utilities for the gathering scripts, such as standard output handlers
and formatters.
###

# Skript-Wide Options
options:
	labsprefix: <##00cdf6>&lMC<##00cdf6>&lL<##00b8e8>&la<##00a2da>&lb<##008dcc>&ls &fÂ»

# Load-Up Events
on script load:
	# Log the script load in console
	skGathering_messageLogFile("The Gathering Utilities Skript has been loaded on server %{server}%!")

	# Load UUID's for gathering player data
	skGathering_loadUuidsFromEssentials()
	set {_numUuids} to amount of {skgathering::uuids::*}
	skGathering_messageLogFile("-> Loaded %{_numUuids}% player UUID's from EssentialsX!")

	# Set estop to false
	set {skgathering::estop} to false


# Skript Reflect Imports
import:
	java.io.File
	java.io.FileWriter
	java.io.BufferedWriter
	java.io.IOException
	java.io.FileNotFoundException
	org.bukkit.Bukkit
	com.earth2me.essentials.Essentials
	com.earth2me.essentials.BalanceTopImpl

#####################
# UTILITY FUNCTIONS #
#####################
function skGathering_messageConsole(message: strings="Error in Console Message - No Input Given!", addNewline: boolean=false):
	messageConsole("GsK", {_message::*}, {_addNewline})

function skGathering_messagePlayer(player: player, message: strings="Error in Player Message - No Input Given!", addNewline: boolean=false):
	messagePlayer({_player}, {_message::*}, "{@labsprefix}", {_addNewline})

function skGathering_messagePlayerNoPrefix(player: player, message: strings="Error in Player Message - No Input Given!", addNewline: boolean=false):
	messagePlayer({_player}, {_message::*}, "", {_addNewline})

function skGathering_messageDiscord(message: strings="Error in Discord Message - No Input Given!", addNewline: boolean=false):
	messageDiscord({_message::*}, "1228051083419713638", {_addNewline})

function skGathering_messageLogFile(message: strings="Error in Log File Message - No Input Given!", addNewline: boolean=false, severity: string="NORMAL"):
	messageLogFile("GsK", {_message::*}, "gathering.log", {_addNewline}, {_severity})

function skGathering_messageOutputFile(type: string="GeneralOutput", timeDirectory: string="%unix timestamp of now%", message: strings="Error in Output File Message - No Input Given!"):
	# Create directory and file paths
	set {_directoryPath} to "plugins/Skript/gatheringoutput/%{_timeDirectory}%/"
	set {_filePath} to "%{_type}%.csv"

	# Check if the directory exists, and if not, create it
	set {_directoryAsFile} to new File({_directoryPath})
	if {_directoryAsFile}.exists() is not true:
		skGathering_messageLogFile("The output directory does not exist and will be created: %{_directoryPath}%", false, "WARNING")
		set {_makeDirectoryResult} to try {_directoryAsFile}.mkdirs()
	if the last java exception is set:
		skGathering_messageLogFile("Error Code MOF1: A Java Exception was detected while trying to find and create output directory! %nl%MkDirs Result: %{_makeDirectoryResult}% %nl%Error: %the last java exception%", false, "SEVERE")
		stop

	# Check if the file exists, and if not, create it
	set {_fileAsFile} to new File({_directoryPath}, {_filePath})
	if {_fileAsFile}.exists() is not true:
		skGathering_messageLogFile("The output file does not exist and will be created: %{_filePath}%", false, "WARNING")
		set {_createFileResult} to try {_fileAsFile}.createNewFile()
	if the last java exception is set:
		skGathering_messageLogFile("Error Code MOF2: A Java Exception was detected while trying to find and create output file! %nl%CreateNewFile Result: %{_createFileResult}% %nl%Error: %the last java exception%", false, "SEVERE")
		stop

	# Create a BufferedWriter for the file and write all given strings as new lines to file
	set {_fileWriter} to new FileWriter({_fileAsFile}, true)
	set {_bufferedWriter} to new BufferedWriter({_fileWriter})
	loop {_message::*}:
		try {_bufferedWriter}.write(loop-value)
		try {_bufferedWriter}.newLine()
	try {_bufferedWriter}.close()
	try {_fileWriter}.close()
	if the last java exception is set:
		skGathering_messageLogFile("Error Code MOF3: A Java Exception was detected while trying to write to output file! Error: %the last java exception%", false, "SEVERE")
		stop

	# Log file writing (execution would have stopped if an error occured)
	skGathering_messageLogFile("Writing to output file `%{_filePath}%` has completed without error!", false, "NORMAL")

#####################
# SUPPORT FUNCTIONS #
#####################

# Updated the list of all UUID's that has joined the server based on the Essentials Baltop
function skGathering_loadUuidsFromEssentials():

	# Get the EssentialsX object from Bukkit's plugin manager
	set {_essentials} to Bukkit.getPluginManager().getPlugin("Essentials")

	# Get balance top object (BalanceTopImpl) from the EssentialsX object
	set {_essentialsBalanceTop} to {_essentials}.[Essentials]getBalanceTop()

	# Get the current balance top mapping (Map<UUID,BalanceTop.Entry>)
	set {_essentialsBalanceMapping} to {_essentialsBalanceTop}.[BalanceTopImpl]getBalanceTopCache()

	# Get the list of UUID's as a set (Set<UUID>)
	set {_essentialsUuidSet} to {_essentialsBalanceMapping}.keySet()

	# Get just the keys as UUID objects in a skript list
	set {skgathering::uuids::*} to ...{_essentialsUuidSet}.toArray()

# Gather all data for specified UUID's
function skGathering_writeAllDataToFile(outputFileName: string, outputFileTime: string, uuidsToProcess: int):

	# Make sure the list of UUID's has been loaded
	if {skgathering::uuids::*} is not set:
		skGathering_messageLogFile("A call was made to get all player data, but UUID's have not been loaded yet!", false, "SEVERE")
		stop

	# Make sure that all other skripts have been loaded
	if script named "gathering-skripts/gathering-balance.sk" is not loaded:
		skGathering_messageLogFile("A call was made to get all player data, but the Gathering Balance Skript has not been loaded!", false, "SEVERE")
		stop
	else if script named "gathering-skripts/gathering-labwars.sk" is not loaded:
		skGathering_messageLogFile("A call was made to get all player data, but the Gathering LabWars Skript has not been loaded!", false, "SEVERE")
		stop
	else if script named "gathering-skripts/gathering-leaderboard.sk" is not loaded:
		skGathering_messageLogFile("A call was made to get all player data, but the Gathering Leaderboard Skript has not been loaded!", false, "SEVERE")
		stop
	else if script named "gathering-skripts/gathering-mcmmo.sk" is not loaded:
		skGathering_messageLogFile("A call was made to get all player data, but the Gathering MCMMO Skript has not been loaded!", false, "SEVERE")
		stop
	else if script named "gathering-skripts/gathering-plan.sk" is not loaded:
		skGathering_messageLogFile("A call was made to get all player data, but the Gathering Plan Skript has not been loaded!", false, "SEVERE")
		stop
	else if script named "gathering-skripts/gathering-ranks.sk" is not loaded:
		skGathering_messageLogFile("A call was made to get all player data, but the Gathering Ranks Skript has not been loaded!", false, "SEVERE")
		stop
	else if script named "gathering-skripts/gathering-votes.sk" is not loaded:
		skGathering_messageLogFile("A call was made to get all player data, but the Gathering Votes Skript has not been loaded!", false, "SEVERE")
		stop

	# Initialize list for data collection
	clear {_playerDataOutput::*}
	set {_mcmmoSkillNamesJoined} to join {skgathering::mcmmoskillnames::*} with ",mcmmo_skill_"
	add "UUID,balance,lw_rev_total,lw_rev_phase,leaderboard_position_chems_all,leaderboard_position_chems_week,leaderboard_position_police_all,leaderboard_position_police_week,mcmmo_power_level,mcmmo_skill_%{_mcmmoSkillNamesJoined}%,chemrank,policerank,donorrank,goldrank,current_month_votes,plan_player_time_total_raw,plan_player_time_month_raw,plan_player_time_week_raw,plan_player_time_day_raw,plan_player_time_afk_raw,plan_player_latest_session_length_raw,plan_player_favorite_server,plan_player_lastseen,plan_player_sessions_count" to {_votesOutputData::*}

	# Loop over all players in the specified range
	set {_playersToProcess::*} to elements from 1 to {_uuidsToProcess} of {skgathering::uuids::*}
	loop {_playersToProcess::*}:

		# Check if estop is activated
		if {skgathering::estop} is true:
			skGathering_messageLogFile("E-Stop activated! Aborting data gathering operation.", false, "WARNING")
			stop

		# Make initial PAPI request for Plan player data to save time instead of waiting (data will be none until second request)
		run section {skgathering::asyncs::getPlaceholdersForUuid} async with arguments loop-value and store result in {_planDataOutput} and wait

		# Get balance data
		run section {skgathering::asyncs::getBalanceDataForUuid} async with arguments loop-value and store result in {_balanceDataOutput} and wait

		# Get labwars data
		run section {skgathering::asyncs::getLabWarsDataForUuid} async with arguments loop-value and store result in {_labWarsDataOutput} and wait

		# Get leaderboard data
		run section {skgathering::asyncs::getLeaderboardDataForUuid} async with arguments loop-value and store result in {_leaderboardDataOutput} and wait

		# Get mcmmo data
		run section {skgathering::asyncs::getMcmmoDataForUuid} async with arguments loop-value and store result in {_mcmmoDataOutput} and wait

		# Get ranks data
		run section {skgathering::asyncs::getRanksDataForUuid} async with arguments loop-value and store result in {_ranksDataOutput} and wait

		# Get votes data
		run section {skgathering::asyncs::getVotesDataForUuid} async with arguments loop-value and store result in {_votesDataOutput} and wait

		# Make second PAPI request for Plan player data (data should be available now)
		run section {skgathering::asyncs::getPlaceholdersForUuid} async with arguments loop-value and store result in {_planDataOutput} and wait

		# Add all data to output
		add "%loop-value%,%{_balanceDataOutput}%,%{_labWarsDataOutput}%,%{_leaderboardDataOutput}%,%{_mcmmoDataOutput}%,%{_ranksDataOutput}%,%{_votesDataOutput}%,%{_planDataOutput}%" to {_playerDataOutput::*}

	# Write all the data to output file
	skGathering_messageOutputFile("%{_outputFileName}%", "%{_outputFileTime}%", {_playerDataOutput::*})

################
# MAIN COMMAND #
################
on tab complete of "/gatherdata":
	set tab completions for position 1 to "balance", "plan", "mcmmo", "leaderboard", "ranks", "votes", "labwars", "all", "estop"
	set tab completions for position 2 to "<identifier>", "now"
	set tab completions for position 3 to "<num uuids | leave unset for all>", "all"

command /gatherdata [<text>] [<text>] [<text>]:
	# Set the permission node to use gatherdata command
	permission: skript.admin
	# Set the permission error message for the gatherdata command
	permission message: &cYou do not have permission to use this command!
	# Sets the description for the gatherdata command
	description: &7Allows you to generate player data and statistics.
	# Main-Command: GatherData
	trigger:
		# Determine identifier (either unix of now, or user-provided)
		if any:
			arg 2 is not set
			arg 2 is "now"
		then:
			set {_identifier} to unix timestamp of now
		else:
			set {_identifier} to arg 2

		# Determine number of UUID's (either set or all)
		if any:
			arg 3 is not set
			arg 3 is "all"
		then:
			set {_numUuids} to size of {skgathering::uuids::*}
		else:
			set {_numUuids} to arg 3 parsed as int

		# Determine data to gather
		if arg 1 is "balance":
			skGathering_messagePlayer(player, "&6Generating Balance Data!")
			skGathering_writeBalancesToFile("Balances", "%{_identifier}%")
		else if arg 1 is "plan":
			skGathering_messagePlayer(player, "&6Generating Plan Data!")
			skGathering_writePlanDataToFile("PlanData", "%{_identifier}%")
		else if arg 1 is "mcmmo":
			skGathering_messagePlayer(player, "&6Generating MCMMO Data!")
			skGathering_writeMcmmoDataToFile("McmmoData", "%{_identifier}%")
		else if arg 1 is "leaderboard":
			skGathering_messagePlayer(player, "&6Generating Leaderboard Data!")
			skGathering_writeLeaderboardToFile("Leaderboard", "%{_identifier}%")
		else if arg 1 is "ranks":
			skGathering_messagePlayer(player, "&6Generating Ranks Data!")
			skGathering_writeRanksToFile("Ranks", "%{_identifier}%")
		else if arg 1 is "votes":
			skGathering_messagePlayer(player, "&6Generating Votes Data!")
			skGathering_writeVotesToFile("Votes", "%{_identifier}%")
		else if arg 1 is "labwars":
			skGathering_messagePlayer(player, "&6Generating LabWars Data!")
			skGathering_writeLabWarsToFile("LabWars", "%{_identifier}%")
		else if arg 1 is "all":
			skGathering_writeAllDataToFile("PlayerData", "%{_identifier}%", {_numUuids})
		else if arg 1 is "estop":
			set {skgathering::estop} to true
			skGathering_messagePlayer(player, "&cE-Stop has been activated! Any ongoing data gathering operations will be aborted. Please reload the skript to reset.")
		else:
			skGathering_messagePlayer(player, "&cInvalid argument! Please use 'balance', 'plan', 'mcmmo', 'leaderboard', 'ranks', 'votes', 'labwars', or 'all'.")