###
Script: skGathering - Utilities Skript
Author: cmh02
Version: 1.0

This script will provide various utilities for the gathering scripts, such as standard output handlers
and formatters.
###

# Skript-Wide Options
options:
	labsprefix: <##00cdf6>&lMC<##00cdf6>&lL<##00b8e8>&la<##00a2da>&lb<##008dcc>&ls &fÂ»

# Load-Up Events
on script load:
	# Log the script load in console
	skGathering_messageLogFile("The Gathering Utilities Skript has been loaded on server %{server}%!")

	# Load UUID's for gathering player data
	skGathering_loadUuidsFromEssentials()
	skGathering_messageLogFile("-> Loaded all player UUID's from EssentialsX!")
	

# Skript Reflect Imports
import:
	java.io.File
	java.io.FileWriter
	java.io.BufferedWriter
	java.io.IOException
	java.io.FileNotFoundException
	org.bukkit.Bukkit
	com.earth2me.essentials.Essentials
	com.earth2me.essentials.BalanceTopImpl

#####################
# UTILITY FUNCTIONS #
#####################
function skGathering_messageConsole(message: strings="Error in Console Message - No Input Given!", addNewline: boolean=false):
	messageConsole("GsK", {_message::*}, {_addNewline})

function skGathering_messagePlayer(player: player, message: strings="Error in Player Message - No Input Given!", addNewline: boolean=false):
	messagePlayer({_player}, {_message::*}, "{@labsprefix}", {_addNewline})

function skGathering_messagePlayerNoPrefix(player: player, message: strings="Error in Player Message - No Input Given!", addNewline: boolean=false):
	messagePlayer({_player}, {_message::*}, "", {_addNewline})

function skGathering_messageDiscord(message: strings="Error in Discord Message - No Input Given!", addNewline: boolean=false):
	messageDiscord({_message::*}, "1228051083419713638", {_addNewline})

function skGathering_messageLogFile(message: strings="Error in Log File Message - No Input Given!", addNewline: boolean=false, severity: string="NORMAL"):
	messageLogFile("GsK", {_message::*}, "gathering.log", {_addNewline}, {_severity})

function skGathering_messageOutputFile(type: string="GeneralOutput", message: strings="Error in Output File Message - No Input Given!"):
	# Create directory and file paths
	set {_directoryPath} to "plugins/Skript/gatheringoutput/"
	set {_filePath} to "%{_type}%.csv"

	# Check if the directory exists, and if not, create it
	set {_directoryAsFile} to new File({_directoryPath})
	if {_directoryAsFile}.exists() is not true:
		skGathering_messageLogFile("The output directory does not exist and will be created: %{_directoryPath}%", false, "WARNING")
		set {_makeDirectoryResult} to try {_directoryAsFile}.mkdirs()
	if the last java exception is set:
		skGathering_messageLogFile("Error Code MOF1: A Java Exception was detected while trying to find and create output directory! %nl%MkDirs Result: %{_makeDirectoryResult}% %nl%Error: %the last java exception%", false, "SEVERE")
		stop

	# Check if the file exists, and if not, create it
	set {_fileAsFile} to new File({_directoryPath}, {_filePath})
	if {_fileAsFile}.exists() is not true:
		skGathering_messageLogFile("The output file does not exist and will be created: %{_filePath}%", false, "WARNING")
		set {_createFileResult} to try {_fileAsFile}.createNewFile()
	if the last java exception is set:
		skGathering_messageLogFile("Error Code MOF2: A Java Exception was detected while trying to find and create output file! %nl%CreateNewFile Result: %{_createFileResult}% %nl%Error: %the last java exception%", false, "SEVERE")
		stop

	# Create a BufferedWriter for the file and write all given strings as new lines to file
	set {_fileWriter} to new FileWriter({_fileAsFile}, true)
	set {_bufferedWriter} to new BufferedWriter({_fileWriter})
	loop {_message::*}:
		try {_bufferedWriter}.write(loop-value)
		try {_bufferedWriter}.newLine()
	try {_bufferedWriter}.close()
	try {_fileWriter}.close()
	if the last java exception is set:
		skGathering_messageLogFile("Error Code MOF3: A Java Exception was detected while trying to write to output file! Error: %the last java exception%", false, "SEVERE")
		stop

	# Log file writing (execution would have stopped if an error occured)
	skGathering_messageLogFile("Writing to output file `%{_filePath}%` has completed without error!", false, "NORMAL")

#####################
# SUPPORT FUNCTIONS #
#####################

# Updated the list of all UUID's that has joined the server based on the Essentials Baltop
function skGathering_loadUuidsFromEssentials():

	# Get the EssentialsX object from Bukkit's plugin manager
	set {_essentials} to Bukkit.getPluginManager().getPlugin("Essentials")

	# Get balance top object (BalanceTopImpl) from the EssentialsX object
	set {_essentialsBalanceTop} to {_essentials}.[Essentials]getBalanceTop()

	# Get the current balance top mapping (Map<UUID,BalanceTop.Entry>)
	set {_essentialsBalanceMapping} to {_essentialsBalanceTop}.[BalanceTopImpl]getBalanceTopCache()

	# Get the list of UUID's as a set (Set<UUID>)
	set {_essentialsUuidSet} to {_essentialsBalanceMapping}.keySet()

	# Get just the keys as UUID objects in a skript list
	set {skgathering::uuids::*} to ...{_essentialsUuidSet}.toArray()

################
# MAIN COMMAND #
################
on tab complete of "/gatherdata":
	set tab completions for position 1 to "balance", "plan"

command /gatherdata [<text>]:
	# Set the permission node to use gatherdata command
	permission: skript.admin
	# Set the permission error message for the gatherdata command
	permission message: &cYou do not have permission to use this command!
	# Sets the description for the gatherdata command
	description: &7Allows you to generate player data and statistics.
	# Main-Command: GatherData
	trigger:
		if arg 1 is "balance":
			skGathering_messagePlayer(player, "&6Generating Balance Data!")
			skGathering_writeBalancesToFile()
		else if arg 1 is "plan":
			skGathering_messagePlayer(player, "&6Generating Plan Data!")
			skGathering_writePlanDataToFile()
		else:
			skGathering_messagePlayer(player, "&cInvalid argument! Please use 'balance' or 'plan'.")