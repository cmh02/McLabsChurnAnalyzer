###
Script: skGathering - Mcmmo Skript
Author: cmh02
Version: 1.0

This script will collect the McMMO metrics of all players that have joined the server via the MCMMO API.
McMMO API: https://github.com/mcMMO-Dev/mcMMO/tree/master/src/main/java/com/gmail/nossr50/api
###

# Skript-Wide Options
options:
	labsprefix: <##00cdf6>&lMC<##00cdf6>&lL<##00b8e8>&la<##00a2da>&lb<##008dcc>&ls &fÂ»

# Skript Reflect Imports
import:
	com.gmail.nossr50.api.DatabaseAPI
	com.gmail.nossr50.api.ExperienceAPI
	com.gmail.nossr50.api.SkillAPI

# Load-Up Events
on script load:
	# Log the script load in console
	skGathering_messageLogFile("The Gathering McMMO Skript has been loaded on server %{server}%!")

	# Get all skills from the API as a skript list
	set {_skills} to try SkillAPI.getSkills()
	set {skgathering::mcmmoskillnames::*} to ...{_skills}
	skGathering_messageLogFile("Loaded MCMMO Skill Names: %{skgathering::mcmmoskillnames::*}%")
	if the last java exception is set:
		set {_player} to offlineplayer({_uuid})
		skGathering_messageLogFile("Error Code GM-OSL: A Java Exception was detected while trying to obtain MCMMO Skill Names!%nl%-> Error: %the last java exception%", false, "SEVERE")
		stop

	# Get MCMMO Database API Object
	set {skgathering::apiobjects::mcmmo} to new DatabaseAPI()

	# Make section for interacting with API in async
	create new section with {_uuid} stored in {skgathering::asyncs::getMcmmoDataForUuid}:

		# Create list for storing individual player data
		clear {_mcmmoDataPlayer::*}

		# Check if the player exists in the mcmmo database
		if the last java exception is set:
			set {_player} to offlineplayer({_uuid})
			skGathering_messageLogFile("Error Code GMD1: A Java Exception was detected while trying to check if player exists in MCMMO Database!%nl%-> Player: %{_player}%%nl%-> UUID: %{_uuid}%%nl%-> Error: %the last java exception%", false, "SEVERE")
			return "<none>"
		else if {_doesPlayerExist} is false:
			skGathering_messageLogFile("Warning Code GMD2: Player does not exist in MCMMO Database!%nl%-> UUID: %{_uuid}%", false, "WARNING")
			return "<none>"
		else:
			# Add power level to output
			set {_powerLevel} to try ExperienceAPI.getPowerLevelOffline({_uuid})
			if the last java exception is set:
				set {_player} to offlineplayer({_uuid})
				skGathering_messageLogFile("Error Code GMD3: A Java Exception was detected while trying to obtain MCMMO Power Level!%nl%-> Player: %{_player}%%nl%-> UUID: %{_uuid}%%nl%-> Error: %the last java exception%", false, "SEVERE")
				add "<none>" to {_mcmmoDataPlayer::*}
			else:
				add "%{_powerLevel}%" to {_mcmmoDataPlayer::*}

			# Loop Skills
			loop {skgathering::mcmmoskillnames::*}:
				# Add skill level to output
				set {_skillLevel} to try ExperienceAPI.getLevelOffline({_uuid}, loop-value)
				if the last java exception is set:
					set {_player} to offlineplayer({_uuid})
					skGathering_messageLogFile("Error Code GMD4: A Java Exception was detected while trying to obtain MCMMO Skill Level for skill %loop-value%!%nl%-> Player: %{_player}%%nl%-> UUID: %{_uuid}%%nl%-> Error: %the last java exception%", false, "SEVERE")
					add "<none>" to {_mcmmoDataPlayer::*}
				else:
					add "%{_skillLevel}%" to {_mcmmoDataPlayer::*}

		# Return in single comma-delimited string
		return join {_mcmmoDataPlayer::*} with ", "

#######################
# GATHERING FUNCTIONS #
#######################

function skGathering_writeMcmmoDataToFile(outputFileName: string, outputFileTime: string):

	# Make sure the list of UUID's has been loaded
	if {skgathering::uuids::*} is not set:
		skGathering_messageLogFile("A call was made to get all player MCMMO data, but UUID's have not been loaded yet!", false, "SEVERE")
		stop

	# Prepare lists for header collection and data output
	clear {_mcmmoData::*}
	clear {_mcmmoDataHeaders::*}

	# Add initial headers
	add "UUID" to {_mcmmoDataHeaders::*}
	add "mcmmo_power_level" to {_mcmmoDataHeaders::*}
	loop {skgathering::mcmmoskillnames::*}:
		add "mcmmo_skill_%loop-value%" to {_mcmmoDataHeaders::*}
	add join {_mcmmoDataHeaders::*} with ", " to {_mcmmoData::*}

	# Loop over UUID's to get mcmmo info
	loop {skgathering::uuids::*}:

		# Check if estop is activated
		if {skgathering::estop} is true:
			skGathering_messageLogFile("E-Stop activated! Aborting MCMMO gathering operation.", false, "WARNING")
			stop

		# Get player's data with API
		run section {skgathering::asyncs::getMcmmoDataForUuid} async with arguments loop-value and store result in {_result} and wait

		# Prepare data in CSV format
		add "%loop-value%,%{_result}%" to {_mcmmoData::*}

	# Write all data to output file
	skGathering_messageOutputFile("%{_outputFileName}%", "%{_outputFileTime}%", {_mcmmoData::*})