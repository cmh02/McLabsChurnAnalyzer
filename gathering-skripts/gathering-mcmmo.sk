###
Script: skGathering - Mcmmo Skript
Author: cmh02
Version: 1.0

This script will collect the McMMO metrics of all players that have joined the server via the MCMMO API.
McMMO API: https://github.com/mcMMO-Dev/mcMMO/tree/master/src/main/java/com/gmail/nossr50/api
###

# Skript-Wide Options
options:
	labsprefix: <##00cdf6>&lMC<##00cdf6>&lL<##00b8e8>&la<##00a2da>&lb<##008dcc>&ls &fÂ»

# Load-Up Events
on script load:
	# Log the script load in console
	skGathering_messageLogFile("The Gathering McMMO Skript has been loaded on server %{server}%!")

# Skript Reflect Imports
import:
	com.gmail.nossr50.api.DatabaseAPI
	com.gmail.nossr50.api.ExperienceAPI
	com.gmail.nossr50.api.SkillAPI

#######################
# GATHERING FUNCTIONS #
#######################

function skGathering_writeMcmmoDataToFile():

	# Make sure the list of UUID's has been loaded
	if {skgathering::uuids::*} is not set:
		skGathering_messageLogFile("A call was made to get all player MCMMO data, but UUID's have not been loaded yet!", false, "SEVERE")
		stop

	# Make section for interacting with API in async
	create new section with {_uuid} stored in {_getMcmmoData}:

		# Create list for storing individual player data
		clear {_mcmmoDataPlayer::*}

		# Add power level to output
		set {_powerLevel} to try ExperienceAPI.getPowerLevelOffline({_uuid})
		if the last java exception is set:
			set {_player} to offlineplayer({_uuid})
			skGathering_messageLogFile("Error Code GMD1: A Java Exception was detected while trying to obtain MCMMO Power Level!%nl%-> Player: %{_player}%%nl%-> UUID: %{_uuid}%%nl%-> Error: %the last java exception%", false, "SEVERE")
			stop
		add "%{_powerLevel}%" to {_mcmmoDataPlayer::*}

		# Loop Skills
		loop {gather::mcmmoskillnames::*}:
			# Add skill level to output
			set {_skillLevel} to try ExperienceAPI.getLevelOffline({_uuid}, loop-value)
			if the last java exception is set:
				set {_player} to offlineplayer({_uuid})
				skGathering_messageLogFile("Error Code GMD2: A Java Exception was detected while trying to obtain MCMMO Skill Level for skill %loop-value%!%nl%-> Player: %{_player}%%nl%-> UUID: %{_uuid}%%nl%-> Error: %the last java exception%", false, "SEVERE")
				stop
			add "%{_skillLevel}%" to {_mcmmoDataPlayer::*}

		# Return in single comma-delimited string
		return join {_mcmmoDataPlayer::*} with ", "

	# Prepare lists for header collection and data output
	clear {_mcmmoData::*}
	clear {_mcmmoDataHeaders::*}

	# Add initial headers
	add "UUID" to {_mcmmoDataHeaders::*}
	add "mcmmo_power_level" to {_mcmmoDataHeaders::*}

	# Get all skills from the API as a skript list
	set {_skills} to try SkillAPI.getSkills()
	set {gather::mcmmoskillnames::*} to ...{_skills}
	skGathering_messageLogFile("Loaded MCMMO Skill Names: %{gather::mcmmoskillnames::*}%")
	if the last java exception is set:
		set {_player} to offlineplayer({_uuid})
		skGathering_messageLogFile("Error Code WMDF1: A Java Exception was detected while trying to obtain MCMMO Skill Names!%nl%-> Player: %{_player}%%nl%-> UUID: %{_uuid}%%nl%-> Error: %the last java exception%", false, "SEVERE")
		stop

	# Add skill headers to output
	loop {gather::mcmmoskillnames::*}:
		add "mcmmo_skill_%loop-value%" to {_mcmmoDataHeaders::*}

	# Add headers to output
	add join {_mcmmoDataHeaders::*} with ", " to {_mcmmoData::*}

	# Get MCMMO Database API Object
	set {_mcmmoDatabaseApi} to new DatabaseAPI()

	# Loop over UUID's to get mcmmo info
	loop {skgathering::uuids::*}:

		# Check if the player exists in the MCMMO Database
		set {_doesPlayerExist} to try {_mcmmoDatabaseApi}.doesPlayerExistInDB(loop-value)
		if the last java exception is set:
			set {_player} to offlineplayer(loop-value)
			skGathering_messageLogFile("Error Code WMDF2: A Java Exception was detected while trying to check if player exists in MCMMO Database!%nl%-> Player: %{_player}%%nl%-> UUID: %loop-value%%nl%-> Error: %the last java exception%", false, "SEVERE")
			continue
		if {_doesPlayerExist} is false:
			skGathering_messageLogFile("Warning Code WMDF3: Player does not exist in MCMMO Database!%nl%-> UUID: %loop-value%", false, "WARNING")
			continue

		# Get player's data with API
		run section {_getMcmmoData} async with arguments loop-value and store result in {_result} and wait
		
		# Prepare data in CSV format
		add "%loop-value%,%{_result}%" to {_mcmmoData::*}

	# Write all data to output file
	set {_currentTime} to unix timestamp of now
	skGathering_messageOutputFile("MCMMO_%{_currentTime}%", {_mcmmoData::*})