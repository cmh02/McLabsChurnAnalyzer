###
Script: skGathering - Ranks Skript
Author: cmh02
Version: 1.0

This script will get the chem rank, police rank, and donor rank of all players that have joined the server.
###

# Skript-Wide Options
options:
	labsprefix: <##00cdf6>&lMC<##00cdf6>&lL<##00b8e8>&la<##00a2da>&lb<##008dcc>&ls &fÂ»

# Load-Up Events
on script load:
	# Log the script load in console
	skGathering_messageLogFile("The Gathering Ranks Skript has been loaded on server %{server}%!")

	# Create lists of ranks and possible prestiges
	set {skgathering::rankinfo::chemranks::*} to "junky", "intern", "trainee", "assistant", "technician", "analyst", "engineer", "bioengineer", "chemist", "biochemist", "alchemist", "pharmacologist", "director"
	set {skgathering::rankinfo::policeRanks::*} to "informant", "recruit", "cadet", "officer", "detective", "corporal", "sergeant", "lieutenant", "colonel", "commander", "deputychief", "chief", "commisioner"
	set {skgathering::rankinfo::donorRanks::*} to "vip", "vipplus", "mvp", "mvpplus", "mvpplusplus"
	set {skgathering::rankinfo::prestiges::*} to "", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"

	# Make section for querying data in async
	create new section with {_uuid} stored in {skgathering::asyncs::getRanksForUuid}:

		# Create placeholder variables
		set {_chemRankWeight} to 0
		set {_policeRankWeight} to 0
		set {_donorRankWeight} to 0
		set {_goldRankWeight} to 0

		# Get the player's groups
		set {_player} to offlineplayer({_uuid})
		set {_playerGroups::*} to the groups of {_player}

		# Determine if player has a chem rank
		loop {skgathering::rankinfo::chemranks::*}:
			loop {skgathering::rankinfo::prestiges::*}:
				if {_playerGroups::*} contains "%loop-value-1%%loop-value-2%":
					set {_rankWeight} to loop-iteration-1
					set {_prestigeWeight} to ((loop-iteration-2) - 1)
					set {_chemRankWeight} to {_rankWeight} + ({_prestigeWeight} * 13)
					exit 3 sections

		# Determine if player is max rank if no chem rank was found
		if {_chemRankWeight} is 0:
			if {_playerGroups::*} contains "maxrank":
				set {_chemRankWeight} to 143

		# Determine if player has a police rank
		loop {skgathering::rankinfo::policeRanks::*}:
			loop {skgathering::rankinfo::prestiges::*}:
				if {_playerGroups::*} contains "%loop-value-1%%loop-value-2%":
					set {_rankWeight} to loop-iteration-1
					set {_prestigeWeight} to ((loop-iteration-2) - 1)
					set {_policeRankWeight} to {_rankWeight} + ({_prestigeWeight} * 13)
					exit 3 sections

		# Determine if player is max police rank if no police rank was found
		if {_policeRankWeight} is 0:
			if {_playerGroups::*} contains "maxcop":
				set {_policeRankWeight} to 143

		# Determine if player has a donor rank
		loop {skgathering::rankinfo::donorRanks::*}:
			if {_playerGroups::*} contains loop-value-2:
				set {_donorRankWeight} to loop-iteration-2
				exit loop

		# Determine if player has gold rank
		if {_playerGroups::*} contains "gold":
			set {_goldRankWeight} to 1

		# Return data
		return "%{_chemRankWeight}%,%{_policeRankWeight}%,%{_donorRankWeight}%,%{_goldRankWeight}%"

#######################
# GATHERING FUNCTIONS #
#######################

function skGathering_writeRanksToFile(outputFileName: string, outputFileTime: string):

	# Make sure the list of UUID's has been loaded
	if {skgathering::uuids::*} is not set:
		skGathering_messageLogFile("A call was made to get all player ranks data, but UUID's have not been loaded yet!", false, "SEVERE")
		stop

	# Prepare data output list with headers
	clear {_ranksOutputData::*}
	add "UUID, chemrank, policerank, donorrank, goldrank" to {_ranksOutputData::*}

	# Loop over UUID's to get leaderboard positions
	loop {skgathering::uuids::*}:

		# Check if estop is activated
		if {skgathering::estop} is true:
			skGathering_messageLogFile("E-Stop activated! Aborting ranks gathering operation.", false, "WARNING")
			stop

		# Get the player's ranks
		run section {skgathering::asyncs::getRanksForUuid} async with arguments loop-value and store result in {_result} and wait

		# Prepare data in CSV format
		add "%loop-value%,%{_result}%" to {_ranksOutputData::*}

	# Write all ranks data to output file
	skGathering_messageOutputFile("%{_outputFileName}%", "%{_outputFileTime}%", {_ranksOutputData::*})